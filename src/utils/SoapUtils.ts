/**
 * Helper method that wraps the creation of a WSDL client within a Promise and
 * adds the typed interfaces generated by wsdl-to-ts.
 */

// tslint:disable:no-any

import * as fs from "fs";
import { NonEmptyString } from "italia-ts-commons/lib/strings";
import * as soap from "soap";

export function createClient<T>(
  wsdlUri: string,
  options: soap.IOptions,
  hostHeader?: string
): Promise<soap.Client & T> {
  return new Promise((resolve, reject) => {
    soap.createClient(wsdlUri, options, (err, client) => {
      if (err) {
        reject(err);
      } else {
        if (hostHeader !== undefined) {
          client.addHttpHeader("Host", hostHeader);
        }
        resolve(client as soap.Client & T); // tslint:disable-line:no-useless-cast
      }
    });
  });
}

// type signature for callback based async soap methods
export type SoapMethodCB<I, O> = (
  input: I,
  cb: (
    err: any,
    result: O,
    raw: string,
    soapHeader: { readonly [k: string]: any }
  ) => any
) => void;

// type signature for Promise based async soap methods
export type SoapMethodPromise<I, O> = (input: I) => Promise<O>;

/**
 * Converts a SoapMethodCB into a SoapMethodPromise
 */
export function promisifySoapMethod<I, O>(
  f: SoapMethodCB<I, O>
): SoapMethodPromise<I, O> {
  return (input: I) =>
    new Promise((resolve, reject) => {
      f(input, (err, result) => {
        if (err) {
          return reject(err);
        }
        resolve(result);
      });
    });
}

/**
 * Retrieve wsdl file content
 * @param {NonEmptyString} path - WSDL file path
 * @return {Promise<string>} WSDL file content
 */
export async function readWsdl(path: NonEmptyString): Promise<string> {
  return new Promise<string>((resolve, reject) => {
    fs.readFile(path, { encoding: "UTF-8" }, (err, wsdl) => {
      if (err) {
        return reject(err);
      }
      resolve(wsdl);
    });
  });
}
