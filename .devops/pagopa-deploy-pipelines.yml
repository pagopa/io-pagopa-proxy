# Azure DevOps pipeline to release a new version and deploy to production.

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor

variables:
  NODE_VERSION: '14.16.0'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

# Only manual activations are intended
trigger: none
pr: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'windows-2019'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v18
      endpoint: 'io-azure-devops-github-ro'

stages:

  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch release/pagopa-porting 
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    condition:
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/release/pagopa-porting'),
          and(
            startsWith(variables['Build.SourceBranch'], 'refs/tags'),
            endsWith(variables['Build.SourceBranch'], '-RELEASE')
          )
        )
      )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        steps:
        - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/release/pagopa\-porting') }}:
          - template: templates/node-github-release/template.yaml@pagopaCommons 
            parameters:
              semver: '${{ parameters.RELEASE_SEMVER }}'
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)
              nodeVersion: $(NODE_VERSION)
              pkg_cache_version_id: $(CACHE_VERSION_ID)
              pkg_cache_folder: $(YARN_CACHE_FOLDER)

        - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/release/pagopa-porting') }}:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'
  # Prepare Artifact
  - stage: Prepare_artifact
    dependsOn:
      - Release
    jobs:
      - job: make_build
        steps:
          - template: azure-templates/setup-project.yml
            parameters:
              # On the assumption that this stage is executed only when Relase stage is,
              #  with this parameter we set the reference the deploy script must pull changes from.
              # The branch/tag name is calculated from the source branch
              #  ex: Build.SourceBranch=refs/heads/release/pagopa-porting --> release/pagopa-porting
              #  ex: Build.SourceBranch=refs/tags/v1.2.3-RELEASE --> v1.2.3-RELEASE
              gitReference: ${{ replace(replace(variables['Build.SourceBranch'], 'refs/tags/', ''), 'refs/heads/', '') }}

          - script: |
              yarn build
            displayName: 'Build'
          - task: CopyFiles@2
            inputs:
              SourceFolder: '$(System.DefaultWorkingDirectory)'
              TargetFolder: '$(System.DefaultWorkingDirectory)/bundle'
              Contents: |
                **/*
                web.config
                !.git/**/*
                !**/*.js.map
                !**/*.ts
                !.vscode/**/*
                !.devops/**/*
                !.prettierrc
                !.gitignore
                !README.md
                !jest.integration.js
                !test
                !tsconfig.json
                !tslint.json
                !yarn.lock
                !Dangerfile.js
                !CODEOWNERS
                !Dockerfile
                !preview.hbs
                !.auto-changelog.json
                !api_pagopa.yaml
                !io-pagopa-node-mock/**/*
                !__*/**/*
            displayName: 'Copy bundle files'
          
          - publish: $(System.DefaultWorkingDirectory)/bundle
            artifact: Bundle
            
  - stage: Deploy_DEV_pagoPA
    dependsOn:
      - Prepare_artifact
    jobs:
      - job: 'deploy'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle

          - task: AzureWebApp@1  
            inputs:
              azureSubscription: '$(DEV_AZURE_SUBSCRIPTION)'
              resourceGroupName: 'pagopa-d-pagopa-proxy-rg'
              appType: 'webApp'
              appName: 'pagopa-d-app-pagopa-proxy'
              package: '$(Pipeline.Workspace)/Bundle'
              deploymentMethod: 'auto'
            displayName: Deploy to DEV-pagoPA

  - stage: DEV_to_UAT_promotion
    dependsOn:
      - Prepare_artifact
    jobs:
      - job: Deploy_UAT_WaitForApproval
        displayName: Wait for UAT approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 4320 # 3 days
          inputs:
            onTimeout: 'skip'

  - stage: Deploy_UAT_pagoPA
    dependsOn:
      - DEV_to_UAT_promotion
    jobs:
      - job: 'deploy'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle

          - task: AzureWebApp@1  
            inputs:
              azureSubscription: '$(UAT_AZURE_SUBSCRIPTION)'
              resourceGroupName: 'pagopa-u-pagopa-proxy-rg'
              appType: 'webApp'
              appName: 'pagopa-u-app-pagopa-proxy'
              package: '$(Pipeline.Workspace)/Bundle'
              deploymentMethod: 'auto'
            displayName: Deploy to UAT-pagoPA

  - stage: API_Tests_UAT_pagoPA
    dependsOn:
      - Deploy_UAT_pagoPA
    jobs:
      - job: TestAPI
        steps:
          - task: Delay@1
            inputs:
              delayForMinutes: '2'
 
          - script: |
              yarn global add newman
            displayName: 'newman installation'

          - script: |
              newman run api-tests/checkout-payments.tests.json --environment=api-tests/uat.envs.json --reporters cli,junit --reporter-junit-export Results/checkout-api-TEST.xml
            displayName: 'Run api test'
            continueOnError: true 

          - task: PublishTestResults@2
            inputs:
              testResultsFormat: 'JUnit'
              testResultsFiles: '**/*-TEST.xml' 
              searchFolder: '$(System.DefaultWorkingDirectory)'          

  - stage: UAT_to_PROD_promotion
    dependsOn:
      - Deploy_UAT_pagoPA
    jobs:
      - job: Deploy_Prod_WaitForApproval
        displayName: Wait for PROD approval
        pool: server
        timeoutInMinutes: 4320 # 3 days
        steps:
        - task: ManualValidation@0
          timeoutInMinutes: 4320 # 3 days
          inputs:
            onTimeout: 'skip'

  - stage: Deploy_to_staging_slot_PROD
    dependsOn:
      - UAT_to_PROD_promotion
    jobs:
      - job: 'deploy'
        steps:
          - checkout: none

          - download: current
            artifact: Bundle

          - task: AzureWebApp@1  
            inputs:
              azureSubscription: '$(PROD_AZURE_SUBSCRIPTION)'
              resourceGroupName: 'pagopa-p-pagopa-proxy-rg'
              appType: 'webApp'
              appName: 'pagopa-p-app-pagopa-proxy'
              package: '$(Pipeline.Workspace)/Bundle'
              deploymentMethod: 'auto'
              deployToSlotOrASE: true
              slotName: 'staging'
            displayName: Deploy pagopa-proxy to staging slot - PROD-pagoPA

  - stage: Swap_to_production_slot_PROD
    dependsOn:
      - Healthcheck_PROD
    jobs:
      - job: 'depoly'       
        steps:  
          - checkout: none
          - task: AzureAppServiceManage@0
            inputs:
              azureSubscription: '$(PROD_AZURE_SUBSCRIPTION)'
              resourceGroupName: 'pagopa-p-pagopa-proxy-rg'
              webAppName: 'pagopa-p-app-pagopa-proxy'
              sourceSlot: staging
              swapWithProduction: true
            displayName: Swap with production slot