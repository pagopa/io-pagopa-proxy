# Azure DevOps pipeline to release a new version and deploy to production.

variables:
  NODE_VERSION: '8.9.4'
  YARN_CACHE_FOLDER: $(Pipeline.Workspace)/.yarn

parameters:
  - name: 'RELEASE_SEMVER'
    displayName: 'When packing a release, define the version bump to apply'
    type: string
    values:
      - major
      - minor
      - patch
    default: minor


  - name: 'PRODUCTION_ENABLE_DEPLOY'
    displayName: 'Enable deploy in production environment'
    type: boolean
    default: true

  - name: 'PRODUCTION_DEPLOY_TYPE'
    displayName: 'Method to achieve deployment in Production (if enabled):'
    type: string
    default: deployToProductionSlot
    values:
      - deployToStagingSlot  
      - deployToProductionSlot
      - deployToStagingSlotAndSwap



# Only manual activations are intended
trigger: none
pr: none

# This pipeline has been implemented to be run on hosted agent pools based both
# on 'windows' and 'ubuntu' virtual machine images and using the scripts defined
# in the package.json file. Since we are deploying on Azure functions on Windows
# runtime, the pipeline is currently configured to use a Windows hosted image for
# the build and deploy.
pool:
  vmImage: 'windows-2019'

resources:
  repositories:
    - repository: pagopaCommons
      type: github
      name: pagopa/azure-pipeline-templates
      ref: refs/tags/v4
      endpoint: 'pagopa'

stages:

  # Create a relase
  # Activated when ONE OF these are met:
  # - is on branch master 
  # - is a tag in the form v{version}-RELEASE
  - stage: Release
    condition:
      and(
        succeeded(),
        or(
          eq(variables['Build.SourceBranch'], 'refs/heads/master'),
          and(
            startsWith(variables['Build.SourceBranch'], 'refs/tags'),
            endsWith(variables['Build.SourceBranch'], '-RELEASE')
          )
        )
      )
    pool:
      vmImage: 'ubuntu-latest'
    jobs:
      - job: make_release
        steps:
        - ${{ if eq(variables['Build.SourceBranch'], 'refs/heads/master') }}:
          - template: templates/node-github-release/template.yaml@pagopaCommons 
            parameters:
              semver: '${{ parameters.RELEASE_SEMVER }}'
              gitEmail: $(GIT_EMAIL)
              gitUsername: $(GIT_USERNAME)
              gitHubConnection: $(GITHUB_CONNECTION)
              nodeVersion: $(NODE_VERSION)
              pkg_cache_version_id: $(CACHE_VERSION_ID)
              pkg_cache_folder: $(YARN_CACHE_FOLDER)

        - ${{ if ne(variables['Build.SourceBranch'], 'refs/heads/master') }}:
          - script: |
              echo "We assume this reference to be a valid release: $(Build.SourceBranch). Therefore, there is no need to bundle a new release."
            displayName: 'Skip release bundle'


  # Deploy to PRODUCTION environment if one of the following conditions apply:
  #    - manual deployment:
  #    - PRODUCTION_ENABLE_DEPLOY == true
  - ${{ if eq(parameters.PRODUCTION_ENABLE_DEPLOY, true) }}:
    - stage: Deploy_production
      condition: 
        and(
          succeeded(),
          eq(variables['Build.Reason'], 'Manual')
        )
      dependsOn:
        - Release
      jobs:
        - job: '${{ parameters.PRODUCTION_DEPLOY_TYPE }}_proxyprod'
          steps:
          - template: azure-templates/deploy-steps.yml
            parameters:
              deployType: '${{ parameters.PRODUCTION_DEPLOY_TYPE }}'
              azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
              resourceGroupName: '$(PRODUCTION_RESOURCE_GROUP_NAME)'
              appName: '$(PRODUCTION_PROXYPROD_APP_NAME)'

        - job: '${{ parameters.PRODUCTION_DEPLOY_TYPE }}_proxytest'
          steps:
          - template: azure-templates/deploy-steps.yml
            parameters:
              deployType: '${{ parameters.PRODUCTION_DEPLOY_TYPE }}'
              azureSubscription: '$(PRODUCTION_AZURE_SUBSCRIPTION)'
              resourceGroupName: '$(PRODUCTION_RESOURCE_GROUP_NAME)'
              appName: '$(PRODUCTION_PROXYTEST_APP_NAME)'
